#!/usr/bin/env python3

from datetime import datetime
import sys
import json
import requests
import logging

# ====== CUSTOM PARAMETERS =======

wazuh_fqdn= "wazuh.contoso.com"
jira_fqdn = "your.atlassian.net"
project_key = "SOC"
headers = {
    'Content-Type': 'application/json',
    'Authorization': 'Basic QWERTYUIOPASDFGHJKLZXCVBNM=='
}
log_path = '/tmp/jira_integration.log'


# === END OF CUSTOM PARAMETERS ===


# ========== ATTENTION ==========

# This is a sample Jira API payload that will NOT work for you out of the box.
# You MUST edit it according to your own Jira configurations.

# Jira payload declaration
def create_jira_payload(has_similar_issue, wazuh_agent_name, wazuh_agent_ip, wazuh_id, wazuh_rule_level, wazuh_rule_mitre_ids, wazuh_rule_mitre_names, wazuh_rule_mitre_tactics, issue_key, wazuh_rule_description, wazuh_alert_payload):
    payload = {
        "fields": {
            "customfield_10045": wazuh_agent_name,
            "customfield_10046": wazuh_agent_ip,
            "customfield_10043": f"https://{wazuh_fqdn}/app/wazuh#",
            "customfield_10044": wazuh_id,
            "customfield_10041": wazuh_rule_level,
            "customfield_10055": [{"value": id} for id in wazuh_rule_mitre_ids],
            "customfield_10056": [{"value": name} for name in wazuh_rule_mitre_names],
            "customfield_10057": [{"value": tactic} for tactic in wazuh_rule_mitre_tactics],
            "project": {"key": project_key},
            "summary": wazuh_rule_description,
            "description": {
                "version": 1,
                "type": "doc",
                "content": [
                    {"type": "paragraph", "content": [{"type": "text", "text": "Alert details below."}]},
                    {"type": "codeBlock", "attrs": {"language": "json"}, "content": [{"type": "text", "text": wazuh_alert_payload}]}
                ]
            }
        }
    }
    if has_similar_issue:
        payload["fields"]["issuetype"] = {"name": "Subalert"}
        payload["fields"]["parent"] = {"key": issue_key}
    else:
        payload["fields"]["issuetype"] = {"name": "Alert"}
    return payload

# Setup issue creation hook
hook_url = f"https://{jira_fqdn}/rest/api/3/issue"

# Configure logging to a file
logging.basicConfig(filename=log_path, level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

try:
    # Read configuration parameters
    if len(sys.argv) < 2:
        raise ValueError("Usage: script.py <wazuh_alert_file>")

    wazuh_alert_file = open(sys.argv[1])

    # Read the alert file
    wazuh_alert_json = json.loads(wazuh_alert_file.read())
    wazuh_alert_file.close()

    # Extract issue fields
    wazuh_agent_name = wazuh_alert_json['agent']['name']
    if 'ip' in wazuh_alert_json['agent']:
        wazuh_agent_ip = wazuh_alert_json['agent']['ip']
    elif 'location' in wazuh_alert_json:
        wazuh_agent_ip = wazuh_alert_json['location']
    else:
        wazuh_agent_ip = 'None'
    wazuh_id = wazuh_alert_json['id']
    wazuh_rule_description = wazuh_alert_json['rule']['description']
    wazuh_rule_level = wazuh_alert_json['rule']['level']
    wazuh_rule_mitre_ids = wazuh_alert_json['rule']['mitre']['id']
    wazuh_rule_mitre_names = wazuh_alert_json['rule']['mitre']['technique']
    wazuh_rule_mitre_tactics = wazuh_alert_json['rule']['mitre']['tactic']
    wazuh_alert_payload = json.dumps(wazuh_alert_json, indent=4)

    # Check if a similar issue exists
    jql_url = f"https://{jira_fqdn}/rest/api/2/search?jql=project = {project_key} AND resolution = Unresolved AND issuetype = Alert AND summary ~ '{wazuh_rule_description}'"
    jql_response = requests.get(jql_url, headers=headers)
    jql_json = jql_response.json()

    # Generate request
    if jql_json['total'] == 0:

        # Create Alert issue if similar issue DOES NOT EXIST

        #{
        #   "startAt": 0,
        #   "maxResults": 50,
        #   "total": 0,
        #   "issues": []
        #}

        payload = create_jira_payload(False, wazuh_agent_name, wazuh_agent_ip, wazuh_id, wazuh_rule_level, wazuh_rule_mitre_ids, wazuh_rule_mitre_names, wazuh_rule_mitre_tactics, None, wazuh_rule_description, wazuh_alert_payload)
        response = requests.post(hook_url, headers=headers, json=payload)
    else:

        # Create Subalert issue if similar issue EXISTS

        #{
        #   "expand": "names,schema",
        #   "startAt": 0,
        #   "maxResults": 50,
        #   "total": 1,
        #   "issues": [
        #   {
        #       "expand": "operations,ver...",
        #       "id": "10050",
        #       "self": "https://your.atlassian.net/rest/api/2/issue/10050",
        #       "key": "KEY-16",
        # ...

        issue_key = jql_json['issues'][0]['key']
        payload = create_jira_payload(True, wazuh_agent_name, wazuh_agent_ip, wazuh_id, wazuh_rule_level, wazuh_rule_mitre_ids, wazuh_rule_mitre_names, wazuh_rule_mitre_tactics, issue_key, wazuh_rule_description, wazuh_alert_payload)
        response = requests.post(hook_url, headers=headers, json=payload)

    response_text = response.text

    # Logging
    epoch_time = datetime.now()
    readable_time = epoch_time.strftime("%m-%d-%Y %H:%M:%S")
    log_text = f"{readable_time} -\nRequest:\n\n{json.dumps(payload, indent=4)}\n\nResponse:\n\n{response_text}\n\n"
    logging.info(log_text)

    sys.exit(0)

except Exception as e:
    # Handle exceptions and log errors
    logging.error(f"An error occurred: {str(e)}")
    sys.exit(1)
